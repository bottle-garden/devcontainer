"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("../scanning/tokens");
var vscode_languageserver_types_1 = require("vscode-languageserver-types");
var ranges_1 = require("../util/ranges");
var SyntaxKind;
(function (SyntaxKind) {
    // Top level
    SyntaxKind[SyntaxKind["Document"] = 0] = "Document";
    SyntaxKind[SyntaxKind["Version"] = 1] = "Version";
    SyntaxKind[SyntaxKind["Block"] = 2] = "Block";
    // Strings
    SyntaxKind[SyntaxKind["StringProperty"] = 3] = "StringProperty";
    // Arrays
    SyntaxKind[SyntaxKind["ArrayProperty"] = 4] = "ArrayProperty";
    SyntaxKind[SyntaxKind["ArrayItem"] = 5] = "ArrayItem";
    // Objects
    SyntaxKind[SyntaxKind["ObjectProperty"] = 6] = "ObjectProperty";
    SyntaxKind[SyntaxKind["ObjectMember"] = 7] = "ObjectMember";
})(SyntaxKind = exports.SyntaxKind || (exports.SyntaxKind = {}));
function assertTokenKind(token) {
    var acceptedKinds = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        acceptedKinds[_i - 1] = arguments[_i];
    }
    if (token && token.kind !== tokens_1.TokenKind.Missing && !acceptedKinds.includes(token.kind)) {
        throw new Error("Token was initialized with an invalid '" + tokens_1.getTokenDescription(token.kind) + "' kind.");
    }
}
function combineRange() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    var validRanges = items.filter(function (item) { return !!item; }).map(function (item) { return item.range; });
    if (!validRanges.length) {
        return vscode_languageserver_types_1.Range.create(0, 0, 0, 0);
    }
    validRanges.sort(function (a, b) { return ranges_1.comparePositions(a.start, b.start); });
    return vscode_languageserver_types_1.Range.create(validRanges[0].start, validRanges[validRanges.length - 1].end);
}
var BaseSyntaxNode = /** @class */ (function () {
    function BaseSyntaxNode(kind) {
        this.kind = kind;
    }
    Object.defineProperty(BaseSyntaxNode.prototype, "range", {
        get: function () {
            if (!this.lazyRange) {
                this.lazyRange = this.calculateRange();
            }
            return this.lazyRange;
        },
        enumerable: true,
        configurable: true
    });
    return BaseSyntaxNode;
}());
exports.BaseSyntaxNode = BaseSyntaxNode;
var DocumentSyntax = /** @class */ (function (_super) {
    __extends(DocumentSyntax, _super);
    function DocumentSyntax(versions, blocks, commentsAfter) {
        var _this = _super.call(this, SyntaxKind.Document) || this;
        _this.versions = versions;
        _this.blocks = blocks;
        _this.commentsAfter = commentsAfter;
        return _this;
    }
    DocumentSyntax.prototype.calculateRange = function () {
        return combineRange.apply(void 0, __spread(this.versions, this.blocks, this.commentsAfter));
    };
    return DocumentSyntax;
}(BaseSyntaxNode));
exports.DocumentSyntax = DocumentSyntax;
var VersionSyntax = /** @class */ (function (_super) {
    __extends(VersionSyntax, _super);
    function VersionSyntax(version, equal, integer) {
        var _this = _super.call(this, SyntaxKind.Version) || this;
        _this.version = version;
        _this.equal = equal;
        _this.integer = integer;
        assertTokenKind(version, tokens_1.TokenKind.VersionKeyword);
        assertTokenKind(equal, tokens_1.TokenKind.Equal);
        assertTokenKind(integer, tokens_1.TokenKind.IntegerLiteral);
        return _this;
    }
    VersionSyntax.prototype.calculateRange = function () {
        return combineRange(this.version, this.equal, this.integer);
    };
    return VersionSyntax;
}(BaseSyntaxNode));
exports.VersionSyntax = VersionSyntax;
var BlockSyntax = /** @class */ (function (_super) {
    __extends(BlockSyntax, _super);
    function BlockSyntax(type, name, openBracket, properties, closeBracket) {
        var _this = _super.call(this, SyntaxKind.Block) || this;
        _this.type = type;
        _this.name = name;
        _this.openBracket = openBracket;
        _this.properties = properties;
        _this.closeBracket = closeBracket;
        assertTokenKind(type, tokens_1.TokenKind.ActionKeyword, tokens_1.TokenKind.WorkflowKeyword);
        assertTokenKind(name, tokens_1.TokenKind.StringLiteral);
        assertTokenKind(openBracket, tokens_1.TokenKind.LeftCurlyBracket);
        assertTokenKind(closeBracket, tokens_1.TokenKind.RightCurlyBracket);
        return _this;
    }
    BlockSyntax.prototype.calculateRange = function () {
        return combineRange.apply(void 0, __spread([this.type, this.name, this.openBracket], this.properties, [this.closeBracket]));
    };
    return BlockSyntax;
}(BaseSyntaxNode));
exports.BlockSyntax = BlockSyntax;
var BasePropertySyntax = /** @class */ (function (_super) {
    __extends(BasePropertySyntax, _super);
    function BasePropertySyntax(kind, key, equal) {
        var _this = _super.call(this, kind) || this;
        _this.key = key;
        _this.equal = equal;
        assertTokenKind(key, tokens_1.TokenKind.OnKeyword, tokens_1.TokenKind.ResolvesKeyword, tokens_1.TokenKind.UsesKeyword, tokens_1.TokenKind.NeedsKeyword, tokens_1.TokenKind.RunsKeyword, tokens_1.TokenKind.ArgsKeyword, tokens_1.TokenKind.EnvKeyword, tokens_1.TokenKind.SecretsKeyword);
        assertTokenKind(equal, tokens_1.TokenKind.Equal);
        return _this;
    }
    return BasePropertySyntax;
}(BaseSyntaxNode));
exports.BasePropertySyntax = BasePropertySyntax;
var StringPropertySyntax = /** @class */ (function (_super) {
    __extends(StringPropertySyntax, _super);
    function StringPropertySyntax(key, equal, value) {
        var _this = _super.call(this, SyntaxKind.StringProperty, key, equal) || this;
        _this.value = value;
        assertTokenKind(value, tokens_1.TokenKind.StringLiteral);
        return _this;
    }
    StringPropertySyntax.prototype.calculateRange = function () {
        return combineRange(this.key, this.equal, this.value);
    };
    return StringPropertySyntax;
}(BasePropertySyntax));
exports.StringPropertySyntax = StringPropertySyntax;
var ArrayPropertySyntax = /** @class */ (function (_super) {
    __extends(ArrayPropertySyntax, _super);
    function ArrayPropertySyntax(key, equal, openBracket, items, closeBracket) {
        var _this = _super.call(this, SyntaxKind.ArrayProperty, key, equal) || this;
        _this.openBracket = openBracket;
        _this.items = items;
        _this.closeBracket = closeBracket;
        assertTokenKind(openBracket, tokens_1.TokenKind.LeftSquareBracket);
        assertTokenKind(closeBracket, tokens_1.TokenKind.RightSquareBracket);
        return _this;
    }
    ArrayPropertySyntax.prototype.calculateRange = function () {
        return combineRange.apply(void 0, __spread([this.openBracket], this.items, [this.closeBracket]));
    };
    return ArrayPropertySyntax;
}(BasePropertySyntax));
exports.ArrayPropertySyntax = ArrayPropertySyntax;
var ArrayItemSyntax = /** @class */ (function (_super) {
    __extends(ArrayItemSyntax, _super);
    function ArrayItemSyntax(value, comma) {
        var _this = _super.call(this, SyntaxKind.ArrayItem) || this;
        _this.value = value;
        _this.comma = comma;
        assertTokenKind(value, tokens_1.TokenKind.StringLiteral);
        assertTokenKind(comma, tokens_1.TokenKind.Comma);
        return _this;
    }
    ArrayItemSyntax.prototype.calculateRange = function () {
        return combineRange(this.value, this.comma);
    };
    return ArrayItemSyntax;
}(BaseSyntaxNode));
exports.ArrayItemSyntax = ArrayItemSyntax;
var ObjectPropertySyntax = /** @class */ (function (_super) {
    __extends(ObjectPropertySyntax, _super);
    function ObjectPropertySyntax(key, equal, openBracket, members, closeBracket) {
        var _this = _super.call(this, SyntaxKind.ObjectProperty, key, equal) || this;
        _this.openBracket = openBracket;
        _this.members = members;
        _this.closeBracket = closeBracket;
        assertTokenKind(openBracket, tokens_1.TokenKind.LeftCurlyBracket);
        assertTokenKind(closeBracket, tokens_1.TokenKind.RightCurlyBracket);
        return _this;
    }
    ObjectPropertySyntax.prototype.calculateRange = function () {
        return combineRange.apply(void 0, __spread([this.openBracket], this.members, [this.closeBracket]));
    };
    return ObjectPropertySyntax;
}(BasePropertySyntax));
exports.ObjectPropertySyntax = ObjectPropertySyntax;
var ObjectMemberSyntax = /** @class */ (function (_super) {
    __extends(ObjectMemberSyntax, _super);
    function ObjectMemberSyntax(name, equal, value, comma) {
        var _this = _super.call(this, SyntaxKind.ObjectMember) || this;
        _this.name = name;
        _this.equal = equal;
        _this.value = value;
        _this.comma = comma;
        assertTokenKind(name, tokens_1.TokenKind.Identifier);
        assertTokenKind(equal, tokens_1.TokenKind.Equal);
        assertTokenKind(value, tokens_1.TokenKind.StringLiteral);
        assertTokenKind(comma, tokens_1.TokenKind.Comma);
        return _this;
    }
    ObjectMemberSyntax.prototype.calculateRange = function () {
        return combineRange(this.name, this.equal, this.value, this.comma);
    };
    return ObjectMemberSyntax;
}(BaseSyntaxNode));
exports.ObjectMemberSyntax = ObjectMemberSyntax;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
