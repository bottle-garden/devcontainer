"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("../scanning/tokens");
var syntax_nodes_1 = require("./syntax-nodes");
function parseTokens(allTokens, bag) {
    var tokens = allTokens.filter(function (token) { return token.kind !== tokens_1.TokenKind.Unrecognized; });
    var commentsAfter = extractCommentsAtEndOfFile();
    var reportedErrors = Array();
    var index = 0;
    var versions = Array();
    var blocks = Array();
    while (index < tokens.length) {
        parseTopLevelNode({
            supported: [],
        });
    }
    return new syntax_nodes_1.DocumentSyntax(versions, blocks, commentsAfter);
    function extractCommentsAtEndOfFile() {
        var end = tokens.length - 1;
        while (end >= 0 && tokens[end].kind === tokens_1.TokenKind.Comment) {
            end -= 1;
        }
        var result = tokens.slice(end + 1);
        tokens.splice(end + 1);
        return result;
    }
    function parseTopLevelNode(context) {
        var keywordKinds = [tokens_1.TokenKind.VersionKeyword, tokens_1.TokenKind.WorkflowKeyword, tokens_1.TokenKind.ActionKeyword];
        var keyword = eat.apply(void 0, __spread([context], keywordKinds));
        var innerContext = {
            parent: context,
            supported: keywordKinds,
        };
        switch (keyword.kind) {
            case tokens_1.TokenKind.VersionKeyword: {
                parseVersion(keyword, innerContext);
                break;
            }
            case tokens_1.TokenKind.WorkflowKeyword:
            case tokens_1.TokenKind.ActionKeyword: {
                parseBlock(keyword, innerContext);
                break;
            }
            case tokens_1.TokenKind.Missing: {
                // move to the next token
                break;
            }
            default: {
                throw new Error("Unexpected token '" + tokens_1.getTokenDescription(keyword.kind) + "' here.");
            }
        }
    }
    function parseVersion(version, context) {
        var equal = eat(context, tokens_1.TokenKind.Equal);
        var integer = eat(context, tokens_1.TokenKind.IntegerLiteral);
        versions.push(new syntax_nodes_1.VersionSyntax(version, equal, integer));
    }
    function parseBlock(type, context) {
        var name = eat(context, tokens_1.TokenKind.StringLiteral);
        var openBracket = eat(context, tokens_1.TokenKind.LeftCurlyBracket);
        var properties = parseProperties({
            parent: context,
            supported: [tokens_1.TokenKind.RightCurlyBracket],
        });
        var closeBracket = eat(context, tokens_1.TokenKind.RightCurlyBracket);
        blocks.push(new syntax_nodes_1.BlockSyntax(type, name, openBracket, properties, closeBracket));
    }
    function parseProperties(context) {
        var properties = [];
        while (!isNext(tokens_1.TokenKind.RightCurlyBracket)) {
            var keyKinds = [
                tokens_1.TokenKind.OnKeyword,
                tokens_1.TokenKind.ResolvesKeyword,
                tokens_1.TokenKind.UsesKeyword,
                tokens_1.TokenKind.NeedsKeyword,
                tokens_1.TokenKind.RunsKeyword,
                tokens_1.TokenKind.ArgsKeyword,
                tokens_1.TokenKind.EnvKeyword,
                tokens_1.TokenKind.SecretsKeyword,
            ];
            var key = eat.apply(void 0, __spread([context], keyKinds));
            if (key.kind === tokens_1.TokenKind.Missing) {
                // Stop looking for properties
                break;
            }
            properties.push(parseProperty(key, {
                parent: context,
                supported: keyKinds,
            }));
        }
        return properties;
    }
    function parseProperty(key, context) {
        var equal = eat(context, tokens_1.TokenKind.Equal);
        var valueStart = eat(context, tokens_1.TokenKind.StringLiteral, tokens_1.TokenKind.LeftCurlyBracket, tokens_1.TokenKind.LeftSquareBracket);
        var property;
        switch (valueStart.kind) {
            case tokens_1.TokenKind.StringLiteral: {
                property = new syntax_nodes_1.StringPropertySyntax(key, equal, valueStart);
                break;
            }
            case tokens_1.TokenKind.LeftSquareBracket: {
                var items = parseArrayItems(context);
                var closeBracket = eat(context, tokens_1.TokenKind.RightSquareBracket);
                property = new syntax_nodes_1.ArrayPropertySyntax(key, equal, valueStart, items, closeBracket);
                break;
            }
            case tokens_1.TokenKind.LeftCurlyBracket: {
                var members = parseObjectMembers(context);
                var closeBracket = eat(context, tokens_1.TokenKind.RightCurlyBracket);
                property = new syntax_nodes_1.ObjectPropertySyntax(key, equal, valueStart, members, closeBracket);
                break;
            }
            case tokens_1.TokenKind.Missing: {
                // Insert missing value as a string property
                property = new syntax_nodes_1.StringPropertySyntax(key, equal, valueStart);
                break;
            }
            default: {
                throw new Error("Unexpected token '" + tokens_1.getTokenDescription(valueStart.kind) + "' here.");
            }
        }
        return property;
    }
    function parseArrayItems(context) {
        var items = Array();
        while (!isNext(tokens_1.TokenKind.RightSquareBracket)) {
            var value = eat(context, tokens_1.TokenKind.StringLiteral);
            if (value.kind === tokens_1.TokenKind.Missing) {
                break;
            }
            var comma = void 0;
            if (isNext(tokens_1.TokenKind.Comma)) {
                comma = eat(context, tokens_1.TokenKind.Comma);
            }
            items.push(new syntax_nodes_1.ArrayItemSyntax(value, comma));
        }
        return items;
    }
    function parseObjectMembers(context) {
        var members = Array();
        while (!isNext(tokens_1.TokenKind.RightCurlyBracket)) {
            var name = eat(context, tokens_1.TokenKind.Identifier);
            if (name.kind === tokens_1.TokenKind.Missing) {
                break;
            }
            var equal = eat(context, tokens_1.TokenKind.Equal);
            var value = eat(context, tokens_1.TokenKind.StringLiteral);
            var comma = void 0;
            if (isNext(tokens_1.TokenKind.Comma)) {
                comma = eat(context, tokens_1.TokenKind.Comma);
            }
            members.push(new syntax_nodes_1.ObjectMemberSyntax(name, equal, value, comma));
        }
        return members;
    }
    function isNext(kind) {
        return index < tokens.length && tokens[index].kind === kind;
    }
    function eat(context) {
        var expected = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            expected[_i - 1] = arguments[_i];
        }
        var commentsBefore = eatComments();
        while (true) {
            if (index >= tokens.length) {
                return __assign({ commentsBefore: commentsBefore }, missingToken(expected));
            }
            var current = tokens[index];
            if (expected.includes(current.kind)) {
                index += 1;
                if (index < tokens.length) {
                    var commentAfter = tokens[index];
                    if (commentAfter.kind === tokens_1.TokenKind.Comment && commentAfter.range.start.line === current.range.end.line) {
                        index += 1;
                        return __assign({ commentsBefore: commentsBefore }, current, { commentAfter: commentAfter });
                    }
                }
                return __assign({ commentsBefore: commentsBefore }, current);
            }
            var canBeHandledByParent = false;
            var currentContext = context;
            while (!canBeHandledByParent && currentContext) {
                canBeHandledByParent = currentContext.supported.includes(current.kind);
                currentContext = currentContext.parent;
            }
            if (canBeHandledByParent) {
                return __assign({ commentsBefore: commentsBefore }, missingToken(expected));
            }
            if (!reportedErrors[index]) {
                bag.unexpectedToken(current);
                reportedErrors[index] = true;
            }
            index += 1;
        }
    }
    function eatComments() {
        var result;
        while (index < tokens.length && tokens[index].kind === tokens_1.TokenKind.Comment) {
            if (!result) {
                result = [];
            }
            result.push(tokens[index]);
            index += 1;
        }
        return result;
    }
    function missingToken(expected) {
        var missingIndex = index;
        var endOfFile = index >= tokens.length;
        if (endOfFile) {
            missingIndex = tokens.length - 1;
        }
        var range = tokens[missingIndex].range;
        if (!reportedErrors[missingIndex]) {
            bag.missingToken(expected, range, endOfFile);
            reportedErrors[missingIndex] = true;
        }
        return {
            range: range,
            kind: tokens_1.TokenKind.Missing,
            text: "",
        };
    }
}
exports.parseTokens = parseTokens;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
