/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
import { TokenWithTrivia } from "../scanning/tokens";
import { Range } from "vscode-languageserver-types";
export declare enum SyntaxKind {
    Document = 0,
    Version = 1,
    Block = 2,
    StringProperty = 3,
    ArrayProperty = 4,
    ArrayItem = 5,
    ObjectProperty = 6,
    ObjectMember = 7
}
export declare abstract class BaseSyntaxNode {
    readonly kind: SyntaxKind;
    private lazyRange;
    protected constructor(kind: SyntaxKind);
    readonly range: Range;
    protected abstract calculateRange(): Range;
}
export declare class DocumentSyntax extends BaseSyntaxNode {
    readonly versions: ReadonlyArray<VersionSyntax>;
    readonly blocks: ReadonlyArray<BlockSyntax>;
    readonly commentsAfter: ReadonlyArray<TokenWithTrivia>;
    constructor(versions: ReadonlyArray<VersionSyntax>, blocks: ReadonlyArray<BlockSyntax>, commentsAfter: ReadonlyArray<TokenWithTrivia>);
    protected calculateRange(): Range;
}
export declare class VersionSyntax extends BaseSyntaxNode {
    readonly version: TokenWithTrivia;
    readonly equal: TokenWithTrivia;
    readonly integer: TokenWithTrivia;
    constructor(version: TokenWithTrivia, equal: TokenWithTrivia, integer: TokenWithTrivia);
    protected calculateRange(): Range;
}
export declare class BlockSyntax extends BaseSyntaxNode {
    readonly type: TokenWithTrivia;
    readonly name: TokenWithTrivia;
    readonly openBracket: TokenWithTrivia;
    readonly properties: ReadonlyArray<BasePropertySyntax>;
    readonly closeBracket: TokenWithTrivia;
    constructor(type: TokenWithTrivia, name: TokenWithTrivia, openBracket: TokenWithTrivia, properties: ReadonlyArray<BasePropertySyntax>, closeBracket: TokenWithTrivia);
    protected calculateRange(): Range;
}
export declare abstract class BasePropertySyntax extends BaseSyntaxNode {
    readonly key: TokenWithTrivia;
    readonly equal: TokenWithTrivia;
    protected constructor(kind: SyntaxKind, key: TokenWithTrivia, equal: TokenWithTrivia);
}
export declare class StringPropertySyntax extends BasePropertySyntax {
    readonly value: TokenWithTrivia | undefined;
    constructor(key: TokenWithTrivia, equal: TokenWithTrivia, value: TokenWithTrivia | undefined);
    protected calculateRange(): Range;
}
export declare class ArrayPropertySyntax extends BasePropertySyntax {
    readonly openBracket: TokenWithTrivia;
    readonly items: ReadonlyArray<ArrayItemSyntax>;
    readonly closeBracket: TokenWithTrivia;
    constructor(key: TokenWithTrivia, equal: TokenWithTrivia, openBracket: TokenWithTrivia, items: ReadonlyArray<ArrayItemSyntax>, closeBracket: TokenWithTrivia);
    protected calculateRange(): Range;
}
export declare class ArrayItemSyntax extends BaseSyntaxNode {
    readonly value: TokenWithTrivia;
    readonly comma: TokenWithTrivia | undefined;
    constructor(value: TokenWithTrivia, comma: TokenWithTrivia | undefined);
    protected calculateRange(): Range;
}
export declare class ObjectPropertySyntax extends BasePropertySyntax {
    readonly openBracket: TokenWithTrivia;
    readonly members: ReadonlyArray<ObjectMemberSyntax>;
    readonly closeBracket: TokenWithTrivia;
    constructor(key: TokenWithTrivia, equal: TokenWithTrivia, openBracket: TokenWithTrivia, members: ReadonlyArray<ObjectMemberSyntax>, closeBracket: TokenWithTrivia);
    protected calculateRange(): Range;
}
export declare class ObjectMemberSyntax extends BaseSyntaxNode {
    readonly name: TokenWithTrivia;
    readonly equal: TokenWithTrivia;
    readonly value: TokenWithTrivia;
    readonly comma: TokenWithTrivia | undefined;
    constructor(name: TokenWithTrivia, equal: TokenWithTrivia, value: TokenWithTrivia, comma: TokenWithTrivia | undefined);
    protected calculateRange(): Range;
}
