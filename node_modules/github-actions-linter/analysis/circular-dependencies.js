"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
function analyzeCircularDependencies(document, bag) {
    var dependencies = new Map();
    document.actions.forEach(function (action) {
        if (action.needs) {
            dependencies.set(action.name, action.needs.actions);
        }
        else {
            dependencies.set(action.name, []);
        }
        check(action.name, action.syntax.name.range, new Set());
    });
    function check(action, range, visited) {
        var e_1, _a;
        if (visited.has(action)) {
            bag.circularDependency(action, range);
            return true;
        }
        visited.add(action);
        var entry = dependencies.get(action);
        if (entry) {
            try {
                for (var entry_1 = __values(entry), entry_1_1 = entry_1.next(); !entry_1_1.done; entry_1_1 = entry_1.next()) {
                    var dependency = entry_1_1.value;
                    if (check(dependency.value, dependency.syntax.range, visited)) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (entry_1_1 && !entry_1_1.done && (_a = entry_1.return)) _a.call(entry_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        visited.delete(action);
        return false;
    }
}
exports.analyzeCircularDependencies = analyzeCircularDependencies;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hbmFseXNpcy9jaXJjdWxhci1kZXBlbmRlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7Ozs7Ozs7Ozs7QUFNSCxTQUFnQiwyQkFBMkIsQ0FBQyxRQUF1QixFQUFFLEdBQWtCO0lBQ3JGLElBQU0sWUFBWSxHQUFHLElBQUksR0FBRyxFQUEyQyxDQUFDO0lBRXhFLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTTtRQUM3QixJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckQ7YUFBTTtZQUNMLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLEtBQUssQ0FBQyxNQUFjLEVBQUUsS0FBWSxFQUFFLE9BQW9COztRQUMvRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkIsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwQixJQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxFQUFFOztnQkFDVCxLQUF5QixJQUFBLFVBQUEsU0FBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7b0JBQTNCLElBQU0sVUFBVSxrQkFBQTtvQkFDbkIsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRTt3QkFDN0QsT0FBTyxJQUFJLENBQUM7cUJBQ2I7aUJBQ0Y7Ozs7Ozs7OztTQUNGO1FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7QUFDSCxDQUFDO0FBakNELGtFQWlDQyIsImZpbGUiOiJzcmMvYW5hbHlzaXMvY2lyY3VsYXItZGVwZW5kZW5jaWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgMjAxOSBPbWFyIFRhd2Zpay4gUGxlYXNlIHNlZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHJvb3Qgb2YgdGhpcyByZXBvc2l0b3J5LlxuICovXG5cbmltcG9ydCB7IEJvdW5kRG9jdW1lbnQsIEJvdW5kU3RyaW5nVmFsdWUgfSBmcm9tIFwiLi4vYmluZGluZy9ib3VuZC1ub2Rlc1wiO1xuaW1wb3J0IHsgRGlhZ25vc3RpY0JhZyB9IGZyb20gXCIuLi91dGlsL2RpYWdub3N0aWNzXCI7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVDaXJjdWxhckRlcGVuZGVuY2llcyhkb2N1bWVudDogQm91bmREb2N1bWVudCwgYmFnOiBEaWFnbm9zdGljQmFnKTogdm9pZCB7XG4gIGNvbnN0IGRlcGVuZGVuY2llcyA9IG5ldyBNYXA8c3RyaW5nLCBSZWFkb25seUFycmF5PEJvdW5kU3RyaW5nVmFsdWU+PigpO1xuXG4gIGRvY3VtZW50LmFjdGlvbnMuZm9yRWFjaChhY3Rpb24gPT4ge1xuICAgIGlmIChhY3Rpb24ubmVlZHMpIHtcbiAgICAgIGRlcGVuZGVuY2llcy5zZXQoYWN0aW9uLm5hbWUsIGFjdGlvbi5uZWVkcy5hY3Rpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVwZW5kZW5jaWVzLnNldChhY3Rpb24ubmFtZSwgW10pO1xuICAgIH1cblxuICAgIGNoZWNrKGFjdGlvbi5uYW1lLCBhY3Rpb24uc3ludGF4Lm5hbWUucmFuZ2UsIG5ldyBTZXQ8c3RyaW5nPigpKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2hlY2soYWN0aW9uOiBzdHJpbmcsIHJhbmdlOiBSYW5nZSwgdmlzaXRlZDogU2V0PHN0cmluZz4pOiBib29sZWFuIHtcbiAgICBpZiAodmlzaXRlZC5oYXMoYWN0aW9uKSkge1xuICAgICAgYmFnLmNpcmN1bGFyRGVwZW5kZW5jeShhY3Rpb24sIHJhbmdlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZpc2l0ZWQuYWRkKGFjdGlvbik7XG5cbiAgICBjb25zdCBlbnRyeSA9IGRlcGVuZGVuY2llcy5nZXQoYWN0aW9uKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGZvciAoY29uc3QgZGVwZW5kZW5jeSBvZiBlbnRyeSkge1xuICAgICAgICBpZiAoY2hlY2soZGVwZW5kZW5jeS52YWx1ZSwgZGVwZW5kZW5jeS5zeW50YXgucmFuZ2UsIHZpc2l0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpdGVkLmRlbGV0ZShhY3Rpb24pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19
