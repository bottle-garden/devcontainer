#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var compilation_1 = require("./util/compilation");
var chalk_1 = require("chalk");
var highlight_range_1 = require("./util/highlight-range");
var vscode_languageserver_types_1 = require("vscode-languageserver-types");
var diagnostics_1 = require("./util/diagnostics");
var errorsCount = 0;
function reportError(message, severity, file) {
    errorsCount += 1;
    console.error(chalk_1.default.red(diagnostics_1.severityToString(severity)) + ": " + chalk_1.default.grey(file ? file + ": " : "") + message);
}
var files = process.argv.slice(2);
if (files.length === 0) {
    reportError("No files passed to lint.", vscode_languageserver_types_1.DiagnosticSeverity.Error);
}
files.forEach(function (file) {
    try {
        var text_1 = fs.readFileSync(file, "utf8");
        var compilation = new compilation_1.Compilation(text_1);
        if (compilation.diagnostics.length === 0) {
            console.info(chalk_1.default.green("VALID") + ": " + chalk_1.default.gray(file));
        }
        else {
            compilation.diagnostics.forEach(function (diagnostic) {
                reportError(diagnostic.message, diagnostic.severity, file);
                console.error(highlight_range_1.highlight(diagnostic.range, text_1));
            });
        }
    }
    catch (ex) {
        reportError(ex.toString(), vscode_languageserver_types_1.DiagnosticSeverity.Error, file);
    }
    console.log();
});
process.exit(errorsCount);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsdUJBQXlCO0FBQ3pCLGtEQUFpRDtBQUNqRCwrQkFBMEI7QUFDMUIsMERBQW1EO0FBQ25ELDJFQUFpRTtBQUNqRSxrREFBc0Q7QUFFdEQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBRXBCLFNBQVMsV0FBVyxDQUFDLE9BQWUsRUFBRSxRQUF3QyxFQUFFLElBQWE7SUFDM0YsV0FBVyxJQUFJLENBQUMsQ0FBQztJQUVqQixPQUFPLENBQUMsS0FBSyxDQUFJLGVBQUssQ0FBQyxHQUFHLENBQUMsOEJBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBSyxlQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUksSUFBSSxPQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQVMsQ0FBQyxDQUFDO0FBQzlHLENBQUM7QUFFRCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3RCLFdBQVcsQ0FBQywwQkFBMEIsRUFBRSxnREFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuRTtBQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO0lBQ2hCLElBQUk7UUFDRixJQUFNLE1BQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQyxJQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsTUFBSSxDQUFDLENBQUM7UUFFMUMsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEMsT0FBTyxDQUFDLElBQUksQ0FBSSxlQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFLLGVBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFHLENBQUMsQ0FBQztTQUM5RDthQUFNO1lBQ0wsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVO2dCQUN4QyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUMzRCxPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ1gsV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxnREFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUQ7SUFFRCxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9jbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vKiFcbiAqIENvcHlyaWdodCAyMDE5IE9tYXIgVGF3ZmlrLiBQbGVhc2Ugc2VlIExJQ0VOU0UgZmlsZSBhdCB0aGUgcm9vdCBvZiB0aGlzIHJlcG9zaXRvcnkuXG4gKi9cblxuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBDb21waWxhdGlvbiB9IGZyb20gXCIuL3V0aWwvY29tcGlsYXRpb25cIjtcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcbmltcG9ydCB7IGhpZ2hsaWdodCB9IGZyb20gXCIuL3V0aWwvaGlnaGxpZ2h0LXJhbmdlXCI7XG5pbXBvcnQgeyBEaWFnbm9zdGljU2V2ZXJpdHkgfSBmcm9tIFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzXCI7XG5pbXBvcnQgeyBzZXZlcml0eVRvU3RyaW5nIH0gZnJvbSBcIi4vdXRpbC9kaWFnbm9zdGljc1wiO1xuXG5sZXQgZXJyb3JzQ291bnQgPSAwO1xuXG5mdW5jdGlvbiByZXBvcnRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHNldmVyaXR5OiBEaWFnbm9zdGljU2V2ZXJpdHkgfCB1bmRlZmluZWQsIGZpbGU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgZXJyb3JzQ291bnQgKz0gMTtcblxuICBjb25zb2xlLmVycm9yKGAke2NoYWxrLnJlZChzZXZlcml0eVRvU3RyaW5nKHNldmVyaXR5KSl9OiAke2NoYWxrLmdyZXkoZmlsZSA/IGAke2ZpbGV9OiBgIDogXCJcIil9JHttZXNzYWdlfWApO1xufVxuXG5jb25zdCBmaWxlcyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbmlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgcmVwb3J0RXJyb3IoXCJObyBmaWxlcyBwYXNzZWQgdG8gbGludC5cIiwgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yKTtcbn1cblxuZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0ZXh0ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsIFwidXRmOFwiKTtcbiAgICBjb25zdCBjb21waWxhdGlvbiA9IG5ldyBDb21waWxhdGlvbih0ZXh0KTtcblxuICAgIGlmIChjb21waWxhdGlvbi5kaWFnbm9zdGljcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhgJHtjaGFsay5ncmVlbihcIlZBTElEXCIpfTogJHtjaGFsay5ncmF5KGZpbGUpfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21waWxhdGlvbi5kaWFnbm9zdGljcy5mb3JFYWNoKGRpYWdub3N0aWMgPT4ge1xuICAgICAgICByZXBvcnRFcnJvcihkaWFnbm9zdGljLm1lc3NhZ2UsIGRpYWdub3N0aWMuc2V2ZXJpdHksIGZpbGUpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGhpZ2hsaWdodChkaWFnbm9zdGljLnJhbmdlLCB0ZXh0KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgcmVwb3J0RXJyb3IoZXgudG9TdHJpbmcoKSwgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yLCBmaWxlKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCk7XG59KTtcblxucHJvY2Vzcy5leGl0KGVycm9yc0NvdW50KTtcbiJdfQ==
