"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("./tokens");
var vscode_languageserver_types_1 = require("vscode-languageserver-types");
function scanText(text, bag) {
    var index = 0;
    var line = 0;
    var character = 0;
    var tokens = [];
    while (index < text.length) {
        scanNextToken();
    }
    return tokens;
    function scanNextToken() {
        var current = text[index];
        switch (current) {
            case "\r": {
                if (index + 1 < text.length && text[index + 1] === "\n") {
                    index += 2;
                }
                else {
                    index += 1;
                }
                line += 1;
                character = 0;
                break;
            }
            case "\n": {
                index += 1;
                line += 1;
                character = 0;
                break;
            }
            case " ":
            case "\t": {
                index += 1;
                character += 1;
                break;
            }
            case "=": {
                addToken(tokens_1.TokenKind.Equal, current);
                break;
            }
            case ",": {
                addToken(tokens_1.TokenKind.Comma, current);
                break;
            }
            case "{": {
                addToken(tokens_1.TokenKind.LeftCurlyBracket, current);
                break;
            }
            case "}": {
                addToken(tokens_1.TokenKind.RightCurlyBracket, current);
                break;
            }
            case "[": {
                addToken(tokens_1.TokenKind.LeftSquareBracket, current);
                break;
            }
            case "]": {
                addToken(tokens_1.TokenKind.RightSquareBracket, current);
                break;
            }
            case "#": {
                scanComment();
                break;
            }
            case "/": {
                if (index + 1 < text.length && text[index + 1] === "/") {
                    scanComment();
                }
                else {
                    var token = addToken(tokens_1.TokenKind.Unrecognized, current);
                    bag.unrecognizedCharacter(current, token.range);
                }
                break;
            }
            case '"': {
                scanStringLiteral();
                break;
            }
            default: {
                if ("0" <= current && current <= "9") {
                    scanNumberLiteral();
                }
                else if (current === "_" || ("a" <= current && current <= "z") || ("A" <= current && current <= "Z")) {
                    scanKeywordOrIdentifier();
                }
                else {
                    var token = addToken(tokens_1.TokenKind.Unrecognized, current);
                    bag.unrecognizedCharacter(current, token.range);
                }
                break;
            }
        }
    }
    function scanComment() {
        var lookAhead = index + 1;
        while (lookAhead < text.length) {
            var current = text[lookAhead];
            if (current === "\r" || current === "\n") {
                break;
            }
            lookAhead += 1;
        }
        addToken(tokens_1.TokenKind.Comment, text.substring(index, lookAhead));
    }
    function scanStringLiteral() {
        var lookAhead = index + 1;
        while (lookAhead < text.length) {
            var current = text[lookAhead];
            switch (current) {
                case '"': {
                    addToken(tokens_1.TokenKind.StringLiteral, text.substring(index, lookAhead + 1));
                    return;
                }
                case "\r":
                case "\n": {
                    var token_1 = addToken(tokens_1.TokenKind.StringLiteral, text.substring(index, lookAhead));
                    bag.unterminatedStringLiteral(token_1.range);
                    return;
                }
                case "\\": {
                    if (lookAhead + 1 < text.length) {
                        var escaped = text[lookAhead + 1];
                        switch (escaped) {
                            case "\\":
                            case "/":
                            case '"':
                            case "b":
                            case "f":
                            case "n":
                            case "r":
                            case "t": {
                                break;
                            }
                            default: {
                                bag.unsupportedEscapeSequence(escaped, getRange(lookAhead + 1, 1));
                                break;
                            }
                        }
                        lookAhead += 2;
                    }
                    else {
                        lookAhead += 1;
                    }
                    break;
                }
                default: {
                    if (current === "\u007F" || ("\u0000" <= current && current <= "\u001F")) {
                        bag.unrecognizedCharacter(current, getRange(lookAhead, 1));
                    }
                    lookAhead += 1;
                    break;
                }
            }
        }
        var token = addToken(tokens_1.TokenKind.StringLiteral, text.substring(index, lookAhead));
        bag.unterminatedStringLiteral(token.range);
    }
    function scanNumberLiteral() {
        var lookAhead = index + 1;
        while (lookAhead < text.length) {
            var current = text[lookAhead];
            if ("0" <= current && current <= "9") {
                lookAhead += 1;
            }
            else {
                break;
            }
        }
        addToken(tokens_1.TokenKind.IntegerLiteral, text.substring(index, lookAhead));
    }
    function scanKeywordOrIdentifier() {
        var lookAhead = index + 1;
        while (lookAhead < text.length) {
            var current = text[lookAhead];
            if (current === "_" ||
                ("a" <= current && current <= "z") ||
                ("A" <= current && current <= "Z") ||
                ("0" <= current && current <= "9")) {
                lookAhead += 1;
            }
            else {
                break;
            }
        }
        var length = lookAhead - index;
        var value = text.substr(index, length);
        switch (value) {
            case "version": {
                addToken(tokens_1.TokenKind.VersionKeyword, value);
                break;
            }
            case "workflow": {
                addToken(tokens_1.TokenKind.WorkflowKeyword, value);
                break;
            }
            case "action": {
                addToken(tokens_1.TokenKind.ActionKeyword, value);
                break;
            }
            case "on": {
                addToken(tokens_1.TokenKind.OnKeyword, value);
                break;
            }
            case "resolves": {
                addToken(tokens_1.TokenKind.ResolvesKeyword, value);
                break;
            }
            case "uses": {
                addToken(tokens_1.TokenKind.UsesKeyword, value);
                break;
            }
            case "needs": {
                addToken(tokens_1.TokenKind.NeedsKeyword, value);
                break;
            }
            case "runs": {
                addToken(tokens_1.TokenKind.RunsKeyword, value);
                break;
            }
            case "args": {
                addToken(tokens_1.TokenKind.ArgsKeyword, value);
                break;
            }
            case "env": {
                addToken(tokens_1.TokenKind.EnvKeyword, value);
                break;
            }
            case "secrets": {
                addToken(tokens_1.TokenKind.SecretsKeyword, value);
                break;
            }
            default: {
                addToken(tokens_1.TokenKind.Identifier, value);
                break;
            }
        }
    }
    function addToken(kind, contents) {
        var token = {
            kind: kind,
            text: contents,
            range: getRange(character, contents.length),
        };
        index += contents.length;
        character += contents.length;
        tokens.push(token);
        return token;
    }
    function getRange(character, length) {
        return vscode_languageserver_types_1.Range.create(line, character, line, character + length);
    }
}
exports.scanText = scanText;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
