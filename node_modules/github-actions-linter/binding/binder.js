"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var syntax_nodes_1 = require("../parsing/syntax-nodes");
var bound_nodes_1 = require("./bound-nodes");
var tokens_1 = require("../scanning/tokens");
var webhooks = require("@octokit/webhooks-definitions");
var constants_1 = require("../util/constants");
var ON_SCHEDULE_REGEX = /schedule\(.+\)/;
function bindDocument(root, bag) {
    var version;
    var workflows = Array();
    var actions = Array();
    root.versions.forEach(function (syntax) {
        bindVersion(syntax);
    });
    var reportedErrorOnMisplacedVersion = false;
    root.blocks.forEach(function (syntax) {
        if (!reportedErrorOnMisplacedVersion &&
            version &&
            syntax.type.range.start.line < version.syntax.version.range.start.line) {
            bag.versionAfterBlock(version.syntax.version.range);
            reportedErrorOnMisplacedVersion = true;
        }
        switch (syntax.type.kind) {
            case tokens_1.TokenKind.WorkflowKeyword: {
                bindWorkflow(syntax);
                break;
            }
            case tokens_1.TokenKind.ActionKeyword: {
                bindAction(syntax);
                break;
            }
            default: {
                throw new Error("Unexpected block kind '" + syntax.type.kind + "' here.");
            }
        }
    });
    return new bound_nodes_1.BoundDocument(version, workflows, actions, root);
    function bindVersion(syntax) {
        if (version) {
            bag.multipleVersions(syntax.version.range);
        }
        else {
            var value = 0;
            if (syntax.integer.kind !== tokens_1.TokenKind.Missing) {
                value = parseInt(syntax.integer.text, 10);
                if (isNaN(value) || value < 0 || value > constants_1.MAXIMUM_SUPPORTED_VERSION) {
                    bag.unrecognizedVersion(syntax.integer.text, syntax.integer.range);
                }
            }
            version = new bound_nodes_1.BoundVersion(value, syntax);
        }
    }
    function bindWorkflow(syntax) {
        var on;
        var resolves;
        syntax.properties.forEach(function (property) {
            switch (property.key.kind) {
                case tokens_1.TokenKind.OnKeyword: {
                    if (on) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        on = new bound_nodes_1.BoundOn(bindString(property), property);
                        if (on.event) {
                            var value_1 = on.event.value;
                            if (!webhooks.some(function (definition) { return definition.name === value_1; }) && !ON_SCHEDULE_REGEX.test(value_1)) {
                                bag.unrecognizedEvent(value_1, on.event.syntax.range);
                            }
                        }
                    }
                    break;
                }
                case tokens_1.TokenKind.ResolvesKeyword: {
                    if (resolves) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        resolves = new bound_nodes_1.BoundResolves(bindStringOrArray(property), property);
                    }
                    break;
                }
                default: {
                    bag.invalidProperty(property.key, syntax.type.kind);
                }
            }
        });
        if (!on) {
            bag.propertyMustBeDefined(tokens_1.TokenKind.OnKeyword, syntax.type);
        }
        workflows.push(new bound_nodes_1.BoundWorkflow(removeDoubleQuotes(syntax.name.text), on, resolves, syntax));
    }
    function bindAction(syntax) {
        var uses;
        var needs;
        var runs;
        var args;
        var env;
        var secrets;
        syntax.properties.forEach(function (property) {
            switch (property.key.kind) {
                case tokens_1.TokenKind.UsesKeyword: {
                    if (uses) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        uses = new bound_nodes_1.BoundUses(bindString(property), property);
                        if (uses.value) {
                            if (!constants_1.USES_REGEX.test(uses.value.value)) {
                                bag.invalidUses(uses.value.syntax.range);
                            }
                        }
                    }
                    break;
                }
                case tokens_1.TokenKind.NeedsKeyword: {
                    if (needs) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        needs = new bound_nodes_1.BoundNeeds(bindStringOrArray(property), property);
                    }
                    break;
                }
                case tokens_1.TokenKind.RunsKeyword: {
                    if (runs) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        runs = new bound_nodes_1.BoundRuns(bindStringOrArray(property), property);
                    }
                    break;
                }
                case tokens_1.TokenKind.ArgsKeyword: {
                    if (args) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        args = new bound_nodes_1.BoundArgs(bindStringOrArray(property), property);
                    }
                    break;
                }
                case tokens_1.TokenKind.EnvKeyword: {
                    if (env) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        env = new bound_nodes_1.BoundEnv(bindObject(property), property);
                        env.variables.forEach(function (variable) {
                            if (variable.name.startsWith("GITHUB_")) {
                                bag.reservedEnvironmentVariable(variable.syntax.name.range);
                            }
                        });
                    }
                    break;
                }
                case tokens_1.TokenKind.SecretsKeyword: {
                    if (secrets) {
                        bag.propertyAlreadyDefined(property.key);
                    }
                    else {
                        secrets = new bound_nodes_1.BoundSecrets(bindStringOrArray(property), property);
                    }
                    break;
                }
                default: {
                    bag.invalidProperty(property.key, syntax.type.kind);
                }
            }
        });
        if (!uses) {
            bag.propertyMustBeDefined(tokens_1.TokenKind.UsesKeyword, syntax.type);
        }
        actions.push(new bound_nodes_1.BoundAction(removeDoubleQuotes(syntax.name.text), uses, needs, runs, args, env, secrets, syntax));
    }
    function bindString(syntax) {
        if (!syntax) {
            return undefined;
        }
        switch (syntax.kind) {
            case syntax_nodes_1.SyntaxKind.StringProperty: {
                var property = syntax;
                if (property.value && property.value.kind !== tokens_1.TokenKind.Missing) {
                    var value = removeDoubleQuotes(property.value.text);
                    return new bound_nodes_1.BoundStringValue(value, property.value);
                }
                return undefined;
            }
            case syntax_nodes_1.SyntaxKind.ArrayProperty: {
                bag.valueIsNotString(syntax.key.range);
                return undefined;
            }
            case syntax_nodes_1.SyntaxKind.ObjectProperty: {
                bag.valueIsNotString(syntax.key.range);
                return undefined;
            }
            default: {
                throw new Error("Unexpected Syntax kind '" + syntax.kind + "'");
            }
        }
    }
    function bindStringOrArray(syntax) {
        if (!syntax) {
            return [];
        }
        switch (syntax.kind) {
            case syntax_nodes_1.SyntaxKind.StringProperty: {
                var property = syntax;
                if (property.value && property.value.kind !== tokens_1.TokenKind.Missing) {
                    var value = removeDoubleQuotes(property.value.text);
                    return [new bound_nodes_1.BoundStringValue(value, property.value)];
                }
                return [];
            }
            case syntax_nodes_1.SyntaxKind.ArrayProperty: {
                return syntax.items
                    .filter(function (item) { return item.value.kind !== tokens_1.TokenKind.Missing; })
                    .map(function (item) { return new bound_nodes_1.BoundStringValue(removeDoubleQuotes(item.value.text), item.value); });
            }
            case syntax_nodes_1.SyntaxKind.ObjectProperty: {
                bag.valueIsNotStringOrArray(syntax.key.range);
                return [];
            }
            default: {
                throw new Error("Unexpected Syntax kind '" + syntax.kind + "'");
            }
        }
    }
    function bindObject(syntax) {
        if (!syntax) {
            return [];
        }
        switch (syntax.kind) {
            case syntax_nodes_1.SyntaxKind.StringProperty: {
                bag.valueIsNotAnObject(syntax.key.range);
                return [];
            }
            case syntax_nodes_1.SyntaxKind.ArrayProperty: {
                bag.valueIsNotAnObject(syntax.key.range);
                return [];
            }
            case syntax_nodes_1.SyntaxKind.ObjectProperty: {
                return syntax.members
                    .filter(function (member) { return member.name.kind !== tokens_1.TokenKind.Missing && member.value.kind !== tokens_1.TokenKind.Missing; })
                    .map(function (member) { return new bound_nodes_1.BoundObjectMember(member.name.text, removeDoubleQuotes(member.value.text), member); });
            }
            default: {
                throw new Error("Unexpected Syntax kind '" + syntax.kind + "'");
            }
        }
    }
    function removeDoubleQuotes(value) {
        if (value.length === 0) {
            return value;
        }
        if (!value.startsWith('"')) {
            throw new Error("value has to start with double quotes");
        }
        if (value.endsWith('"')) {
            return value.substr(1, value.length - 2);
        }
        // in case of an incomplete token
        return value.substr(1);
    }
}
exports.bindDocument = bindDocument;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
