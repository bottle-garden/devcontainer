/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
import { DocumentSyntax, BlockSyntax, VersionSyntax, ObjectMemberSyntax, BasePropertySyntax } from "../parsing/syntax-nodes";
import { TokenWithTrivia } from "../scanning/tokens";
export declare enum BoundKind {
    Document = 0,
    Version = 1,
    Workflow = 2,
    Action = 3,
    On = 4,
    Resolves = 5,
    Uses = 6,
    Needs = 7,
    Runs = 8,
    Args = 9,
    Env = 10,
    Secrets = 11,
    StringValue = 12,
    ObjectMember = 13
}
export declare abstract class BaseBoundNode {
    readonly kind: BoundKind;
    protected constructor(kind: BoundKind);
}
export declare class BoundDocument extends BaseBoundNode {
    readonly version: BoundVersion | undefined;
    readonly workflows: ReadonlyArray<BoundWorkflow>;
    readonly actions: ReadonlyArray<BoundAction>;
    readonly syntax: DocumentSyntax;
    constructor(version: BoundVersion | undefined, workflows: ReadonlyArray<BoundWorkflow>, actions: ReadonlyArray<BoundAction>, syntax: DocumentSyntax);
}
export declare class BoundVersion extends BaseBoundNode {
    readonly version: number;
    readonly syntax: VersionSyntax;
    constructor(version: number, syntax: VersionSyntax);
}
export declare class BoundWorkflow extends BaseBoundNode {
    readonly name: string;
    readonly on: BoundOn | undefined;
    readonly resolves: BoundResolves | undefined;
    readonly syntax: BlockSyntax;
    constructor(name: string, on: BoundOn | undefined, resolves: BoundResolves | undefined, syntax: BlockSyntax);
}
export declare class BoundAction extends BaseBoundNode {
    readonly name: string;
    readonly uses: BoundUses | undefined;
    readonly needs: BoundNeeds | undefined;
    readonly runs: BoundRuns | undefined;
    readonly args: BoundArgs | undefined;
    readonly env: BoundEnv | undefined;
    readonly secrets: BoundSecrets | undefined;
    readonly syntax: BlockSyntax;
    constructor(name: string, uses: BoundUses | undefined, needs: BoundNeeds | undefined, runs: BoundRuns | undefined, args: BoundArgs | undefined, env: BoundEnv | undefined, secrets: BoundSecrets | undefined, syntax: BlockSyntax);
}
export declare class BoundOn extends BaseBoundNode {
    readonly event: BoundStringValue | undefined;
    readonly syntax: BasePropertySyntax;
    constructor(event: BoundStringValue | undefined, syntax: BasePropertySyntax);
}
export declare class BoundResolves extends BaseBoundNode {
    readonly actions: ReadonlyArray<BoundStringValue>;
    readonly syntax: BasePropertySyntax;
    constructor(actions: ReadonlyArray<BoundStringValue>, syntax: BasePropertySyntax);
}
export declare class BoundUses extends BaseBoundNode {
    readonly value: BoundStringValue | undefined;
    readonly syntax: BasePropertySyntax;
    constructor(value: BoundStringValue | undefined, syntax: BasePropertySyntax);
}
export declare class BoundNeeds extends BaseBoundNode {
    readonly actions: ReadonlyArray<BoundStringValue>;
    readonly syntax: BasePropertySyntax;
    constructor(actions: ReadonlyArray<BoundStringValue>, syntax: BasePropertySyntax);
}
export declare class BoundRuns extends BaseBoundNode {
    readonly commands: ReadonlyArray<BoundStringValue>;
    readonly syntax: BasePropertySyntax;
    constructor(commands: ReadonlyArray<BoundStringValue>, syntax: BasePropertySyntax);
}
export declare class BoundArgs extends BaseBoundNode {
    readonly args: ReadonlyArray<BoundStringValue>;
    readonly syntax: BasePropertySyntax;
    constructor(args: ReadonlyArray<BoundStringValue>, syntax: BasePropertySyntax);
}
export declare class BoundEnv extends BaseBoundNode {
    readonly variables: ReadonlyArray<BoundObjectMember>;
    readonly syntax: BasePropertySyntax;
    constructor(variables: ReadonlyArray<BoundObjectMember>, syntax: BasePropertySyntax);
}
export declare class BoundSecrets extends BaseBoundNode {
    readonly secrets: ReadonlyArray<BoundStringValue>;
    readonly syntax: BasePropertySyntax;
    constructor(secrets: ReadonlyArray<BoundStringValue>, syntax: BasePropertySyntax);
}
export declare class BoundStringValue extends BaseBoundNode {
    readonly value: string;
    readonly syntax: TokenWithTrivia;
    constructor(value: string, syntax: TokenWithTrivia);
}
export declare class BoundObjectMember extends BaseBoundNode {
    readonly name: string;
    readonly value: string;
    readonly syntax: ObjectMemberSyntax;
    constructor(name: string, value: string, syntax: ObjectMemberSyntax);
}
