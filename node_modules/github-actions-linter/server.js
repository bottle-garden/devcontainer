"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var diagnostics_1 = require("./services/diagnostics");
var folding_1 = require("./services/folding");
var renaming_1 = require("./services/renaming");
var find_references_1 = require("./services/find-references");
var go_to_definition_1 = require("./services/go-to-definition");
var formatting_1 = require("./services/formatting");
var completion_1 = require("./services/completion");
var connection = vscode_languageserver_1.createConnection(new vscode_languageserver_1.IPCMessageReader(process), new vscode_languageserver_1.IPCMessageWriter(process));
var documents = new vscode_languageserver_1.TextDocuments();
var services = [
    new completion_1.CompletionService(),
    new diagnostics_1.DiagnosticsService(),
    new find_references_1.FindReferencesService(),
    new folding_1.FoldingService(),
    new formatting_1.FormattingService(),
    new go_to_definition_1.GoToDefinitionService(),
    new renaming_1.RenamingService(),
];
services.forEach(function (service) {
    service.activate(connection, documents);
});
connection.onInitialize(function () {
    var capabilities = {
        textDocumentSync: documents.syncKind,
    };
    services.forEach(function (service) {
        if (service.fillCapabilities) {
            service.fillCapabilities(capabilities);
        }
    });
    return { capabilities: capabilities };
});
connection.onShutdown(function () {
    services.forEach(function (service) {
        if (service.dispose) {
            service.dispose();
        }
    });
});
documents.listen(connection);
connection.listen();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILCtEQU8rQjtBQUMvQixzREFBNEQ7QUFDNUQsOENBQW9EO0FBQ3BELGdEQUFzRDtBQUN0RCw4REFBbUU7QUFDbkUsZ0VBQW9FO0FBQ3BFLG9EQUEwRDtBQUMxRCxvREFBMEQ7QUFRMUQsSUFBTSxVQUFVLEdBQUcsd0NBQWdCLENBQUMsSUFBSSx3Q0FBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLHdDQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEcsSUFBTSxTQUFTLEdBQWtCLElBQUkscUNBQWEsRUFBRSxDQUFDO0FBRXJELElBQU0sUUFBUSxHQUFtQztJQUMvQyxJQUFJLDhCQUFpQixFQUFFO0lBQ3ZCLElBQUksZ0NBQWtCLEVBQUU7SUFDeEIsSUFBSSx1Q0FBcUIsRUFBRTtJQUMzQixJQUFJLHdCQUFjLEVBQUU7SUFDcEIsSUFBSSw4QkFBaUIsRUFBRTtJQUN2QixJQUFJLHdDQUFxQixFQUFFO0lBQzNCLElBQUksMEJBQWUsRUFBRTtDQUN0QixDQUFDO0FBRUYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87SUFDdEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsWUFBWSxDQUFDO0lBQ3RCLElBQU0sWUFBWSxHQUF1QjtRQUN2QyxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsUUFBUTtLQUNyQyxDQUFDO0lBRUYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87UUFDdEIsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEVBQUUsWUFBWSxjQUFBLEVBQUUsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDcEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87UUFDdEIsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNuQjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyIsImZpbGUiOiJzcmMvc2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgMjAxOSBPbWFyIFRhd2Zpay4gUGxlYXNlIHNlZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHJvb3Qgb2YgdGhpcyByZXBvc2l0b3J5LlxuICovXG5cbmltcG9ydCB7XG4gIGNyZWF0ZUNvbm5lY3Rpb24sXG4gIFRleHREb2N1bWVudHMsXG4gIElQQ01lc3NhZ2VSZWFkZXIsXG4gIElQQ01lc3NhZ2VXcml0ZXIsXG4gIElDb25uZWN0aW9uLFxuICBTZXJ2ZXJDYXBhYmlsaXRpZXMsXG59IGZyb20gXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXJcIjtcbmltcG9ydCB7IERpYWdub3N0aWNzU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2RpYWdub3N0aWNzXCI7XG5pbXBvcnQgeyBGb2xkaW5nU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2ZvbGRpbmdcIjtcbmltcG9ydCB7IFJlbmFtaW5nU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL3JlbmFtaW5nXCI7XG5pbXBvcnQgeyBGaW5kUmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9maW5kLXJlZmVyZW5jZXNcIjtcbmltcG9ydCB7IEdvVG9EZWZpbml0aW9uU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2dvLXRvLWRlZmluaXRpb25cIjtcbmltcG9ydCB7IEZvcm1hdHRpbmdTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvZm9ybWF0dGluZ1wiO1xuaW1wb3J0IHsgQ29tcGxldGlvblNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9jb21wbGV0aW9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFuZ3VhZ2VTZXJ2aWNlIHtcbiAgYWN0aXZhdGUoY29ubmVjdGlvbjogSUNvbm5lY3Rpb24sIGRvY3VtZW50czogVGV4dERvY3VtZW50cyk6IHZvaWQ7XG4gIGZpbGxDYXBhYmlsaXRpZXM/KGNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogdm9pZDtcbiAgZGlzcG9zZT8oKTogdm9pZDtcbn1cblxuY29uc3QgY29ubmVjdGlvbiA9IGNyZWF0ZUNvbm5lY3Rpb24obmV3IElQQ01lc3NhZ2VSZWFkZXIocHJvY2VzcyksIG5ldyBJUENNZXNzYWdlV3JpdGVyKHByb2Nlc3MpKTtcbmNvbnN0IGRvY3VtZW50czogVGV4dERvY3VtZW50cyA9IG5ldyBUZXh0RG9jdW1lbnRzKCk7XG5cbmNvbnN0IHNlcnZpY2VzOiBSZWFkb25seUFycmF5PExhbmd1YWdlU2VydmljZT4gPSBbXG4gIG5ldyBDb21wbGV0aW9uU2VydmljZSgpLFxuICBuZXcgRGlhZ25vc3RpY3NTZXJ2aWNlKCksXG4gIG5ldyBGaW5kUmVmZXJlbmNlc1NlcnZpY2UoKSxcbiAgbmV3IEZvbGRpbmdTZXJ2aWNlKCksXG4gIG5ldyBGb3JtYXR0aW5nU2VydmljZSgpLFxuICBuZXcgR29Ub0RlZmluaXRpb25TZXJ2aWNlKCksXG4gIG5ldyBSZW5hbWluZ1NlcnZpY2UoKSxcbl07XG5cbnNlcnZpY2VzLmZvckVhY2goc2VydmljZSA9PiB7XG4gIHNlcnZpY2UuYWN0aXZhdGUoY29ubmVjdGlvbiwgZG9jdW1lbnRzKTtcbn0pO1xuXG5jb25uZWN0aW9uLm9uSW5pdGlhbGl6ZSgoKSA9PiB7XG4gIGNvbnN0IGNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzID0ge1xuICAgIHRleHREb2N1bWVudFN5bmM6IGRvY3VtZW50cy5zeW5jS2luZCxcbiAgfTtcblxuICBzZXJ2aWNlcy5mb3JFYWNoKHNlcnZpY2UgPT4ge1xuICAgIGlmIChzZXJ2aWNlLmZpbGxDYXBhYmlsaXRpZXMpIHtcbiAgICAgIHNlcnZpY2UuZmlsbENhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHsgY2FwYWJpbGl0aWVzIH07XG59KTtcblxuY29ubmVjdGlvbi5vblNodXRkb3duKCgpID0+IHtcbiAgc2VydmljZXMuZm9yRWFjaChzZXJ2aWNlID0+IHtcbiAgICBpZiAoc2VydmljZS5kaXNwb3NlKSB7XG4gICAgICBzZXJ2aWNlLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbmRvY3VtZW50cy5saXN0ZW4oY29ubmVjdGlvbik7XG5jb25uZWN0aW9uLmxpc3RlbigpO1xuIl19
