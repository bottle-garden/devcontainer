"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var cache_1 = require("../util/cache");
var tokens_1 = require("../scanning/tokens");
var syntax_nodes_1 = require("../parsing/syntax-nodes");
var diagnostics_1 = require("../util/diagnostics");
var PARSE_ERRORS_MESSAGE = "Cannot format document with parsing errors.";
var FormattingService = /** @class */ (function () {
    function FormattingService() {
    }
    FormattingService.prototype.fillCapabilities = function (capabilities) {
        capabilities.documentFormattingProvider = true;
    };
    FormattingService.prototype.activate = function (connection, documents) {
        connection.onDocumentFormatting(function (params) {
            var uri = params.textDocument.uri;
            var compilation = cache_1.accessCache(documents, uri);
            if (compilation.diagnostics.some(function (d) { return d.code < diagnostics_1.DiagnosticCode.PARSING_ERRORS_MARK; })) {
                connection.window.showErrorMessage(PARSE_ERRORS_MESSAGE);
                return [];
            }
            var _a = params.options, insertSpaces = _a.insertSpaces, tabSize = _a.tabSize;
            var indentationValue = insertSpaces ? " ".repeat(tabSize) : "\t";
            var result = FormattingService.format(compilation, indentationValue);
            var fullRange = vscode_languageserver_1.Range.create(0, 0, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
            return [vscode_languageserver_1.TextEdit.replace(fullRange, result)];
        });
    };
    FormattingService.format = function (compilation, indentationValue) {
        var lines = Array();
        var indentationLevel = 0;
        var lastTokenAdded;
        var currentLine = "";
        compilation.syntax.commentsAfter.forEach(function (comment) {
            add(comment);
        });
        compilation.syntax.versions.forEach(function (version) {
            add(version.version);
            add(version.equal);
            add(version.integer);
        });
        compilation.syntax.blocks.forEach(function (block) {
            addBlockLikeSyntax({
                firstToken: block.type,
                secondToken: block.name,
                openBracket: block.openBracket,
                addBody: function () { return addProperties(block); },
                closeBracket: block.closeBracket,
            });
        });
        addLineBreak(true);
        addLineBreak(true);
        return lines.join("\n");
        function addProperties(block) {
            var strings = Array();
            var arrays = Array();
            var objects = Array();
            block.properties.forEach(function (property) {
                switch (property.kind) {
                    case syntax_nodes_1.SyntaxKind.StringProperty:
                        strings.push(property);
                        break;
                    case syntax_nodes_1.SyntaxKind.ArrayProperty:
                        arrays.push(property);
                        break;
                    case syntax_nodes_1.SyntaxKind.ObjectProperty:
                        objects.push(property);
                        break;
                    default:
                        throw new Error("Syntax kind '" + property.kind + "' is not supported");
                }
            });
            var longestKeyLength = Math.max.apply(Math, __spread(block.properties.map(function (s) { return s.key.text.length; })));
            strings.forEach(function (property) {
                add(property.key);
                if (!property.key.commentAfter && !property.equal.commentsBefore) {
                    currentLine += " ".repeat(longestKeyLength - property.key.text.length);
                }
                add(property.equal);
                add(property.value);
                addLineBreak();
            });
            arrays.forEach(function (property) {
                addBlockLikeSyntax({
                    longestKeyLength: longestKeyLength,
                    firstToken: property.key,
                    secondToken: property.equal,
                    openBracket: property.openBracket,
                    addBody: function () {
                        return property.items.forEach(function (item) {
                            add(item.value);
                            add(item.comma, false);
                            addLineBreak();
                        });
                    },
                    closeBracket: property.closeBracket,
                });
            });
            objects.forEach(function (property) {
                addBlockLikeSyntax({
                    longestKeyLength: longestKeyLength,
                    firstToken: property.key,
                    secondToken: property.equal,
                    openBracket: property.openBracket,
                    addBody: function () {
                        var longestNameLength = Math.max.apply(Math, __spread(property.members.map(function (member) { return member.name.text.length; })));
                        property.members.forEach(function (member) {
                            add(member.name);
                            if (!member.name.commentAfter && !member.equal.commentsBefore) {
                                currentLine += " ".repeat(longestNameLength - member.name.text.length);
                            }
                            add(member.equal);
                            add(member.value);
                            add(member.comma, false);
                            addLineBreak();
                        });
                    },
                    closeBracket: property.closeBracket,
                });
            });
        }
        function addBlockLikeSyntax(opts) {
            addLineBreak(true);
            add(opts.firstToken);
            if (opts.longestKeyLength && !opts.firstToken.commentAfter && !opts.secondToken.commentsBefore) {
                currentLine += " ".repeat(opts.longestKeyLength - opts.firstToken.text.length);
            }
            indentationLevel += 1;
            add(opts.secondToken);
            add(opts.openBracket);
            addLineBreak();
            opts.addBody();
            addLineBreak();
            indentationLevel -= 1;
            add(opts.closeBracket);
            addLineBreak();
        }
        function addLineBreak(addEmpty) {
            if (addEmpty === void 0) { addEmpty = false; }
            if (currentLine.length === 0) {
                if (!addEmpty || lines.length === 0 || lines[lines.length - 1].length === 0) {
                    return;
                }
                if (lastTokenAdded) {
                    switch (lastTokenAdded.kind) {
                        case tokens_1.TokenKind.Comment:
                        case tokens_1.TokenKind.LeftCurlyBracket:
                        case tokens_1.TokenKind.LeftSquareBracket:
                            return;
                        default:
                            break;
                    }
                }
            }
            lines.push(currentLine);
            currentLine = "";
        }
        function add(token, addSpace) {
            if (addSpace === void 0) { addSpace = true; }
            if (!token) {
                return;
            }
            if (token.kind === tokens_1.TokenKind.Missing) {
                throw new Error(PARSE_ERRORS_MESSAGE);
            }
            if (token.commentsBefore) {
                token.commentsBefore.forEach(function (comment) {
                    add(comment);
                    addLineBreak();
                });
            }
            if (currentLine.length === 0) {
                currentLine = indentationValue.repeat(indentationLevel);
            }
            else if (addSpace) {
                currentLine += " ";
            }
            currentLine += token.text;
            lastTokenAdded = token;
            if (token.commentAfter) {
                add(token.commentAfter);
                addLineBreak();
            }
        }
    };
    return FormattingService;
}());
exports.FormattingService = FormattingService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
