"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var cache_1 = require("../util/cache");
var ranges_1 = require("../util/ranges");
var tokens_1 = require("../scanning/tokens");
var webhooks = require("@octokit/webhooks-definitions");
var syntax_nodes_1 = require("../parsing/syntax-nodes");
var CompletionService = /** @class */ (function () {
    function CompletionService() {
    }
    CompletionService.prototype.fillCapabilities = function (capabilities) {
        capabilities.completionProvider = {
            triggerCharacters: ['"'],
        };
    };
    CompletionService.prototype.activate = function (connection, documents) {
        connection.onCompletion(function (params) {
            var uri = params.textDocument.uri;
            var compilation = cache_1.accessCache(documents, uri);
            return CompletionService.provideCompletion(compilation, params.position);
        });
    };
    CompletionService.provideCompletion = function (compilation, position) {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = __values(compilation.syntax.blocks), _d = _c.next(); !_d.done; _d = _c.next()) {
                var block = _d.value;
                if (ranges_1.rangeContains(block.range, position)) {
                    try {
                        for (var _e = __values(block.properties), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var property = _f.value;
                            if (ranges_1.rangeContains(property.range, position)) {
                                switch (property.key.kind) {
                                    case tokens_1.TokenKind.ResolvesKeyword:
                                    case tokens_1.TokenKind.NeedsKeyword: {
                                        return provideActions(compilation, property, position);
                                    }
                                    case tokens_1.TokenKind.OnKeyword: {
                                        return provideEvents(property, position);
                                    }
                                    default: {
                                        return [];
                                    }
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return provideProperties(block);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return [];
    };
    return CompletionService;
}());
exports.CompletionService = CompletionService;
function provideEvents(property, position) {
    if (!isInsideString(property, position)) {
        return [];
    }
    return webhooks.map(function (webhook) {
        return {
            label: webhook.name,
            kind: vscode_languageserver_1.CompletionItemKind.Event,
            detail: "Insert the event '" + webhook.name + "'.",
        };
    });
}
function provideActions(compilation, property, position) {
    if (!isInsideString(property, position)) {
        return [];
    }
    return Array.apply(void 0, __spread(compilation.actions.keys())).map(function (action) {
        return {
            label: action,
            kind: vscode_languageserver_1.CompletionItemKind.Class,
            detail: "Insert the action '" + action + "'.",
        };
    });
}
function provideProperties(block) {
    var kinds;
    switch (block.type.kind) {
        case tokens_1.TokenKind.WorkflowKeyword: {
            kinds = [tokens_1.TokenKind.OnKeyword, tokens_1.TokenKind.ResolvesKeyword];
            break;
        }
        case tokens_1.TokenKind.ActionKeyword: {
            kinds = [
                tokens_1.TokenKind.UsesKeyword,
                tokens_1.TokenKind.NeedsKeyword,
                tokens_1.TokenKind.RunsKeyword,
                tokens_1.TokenKind.ArgsKeyword,
                tokens_1.TokenKind.EnvKeyword,
                tokens_1.TokenKind.SecretsKeyword,
            ];
            break;
        }
        default: {
            throw new Error("Unexpected token kind '" + block.type.kind + "'");
        }
    }
    return kinds.map(function (kind) {
        var text = tokens_1.getTokenDescription(kind);
        return {
            label: text,
            kind: vscode_languageserver_1.CompletionItemKind.Property,
            detail: "Insert a new '" + text + "' property.",
        };
    });
}
function isInsideString(property, position) {
    switch (property.kind) {
        case syntax_nodes_1.SyntaxKind.ArrayProperty: {
            return property.items.some(function (item) { return ranges_1.rangeContains(item.value.range, position); });
        }
        case syntax_nodes_1.SyntaxKind.StringProperty: {
            var value = property.value;
            return value ? ranges_1.rangeContains(value.range, position) : false;
        }
        case syntax_nodes_1.SyntaxKind.ObjectMember: {
            return false;
        }
        default: {
            throw new Error("Unexpected syntax kind '" + property.kind + "'");
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
