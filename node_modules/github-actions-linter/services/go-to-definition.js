"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var cache_1 = require("../util/cache");
var GoToDefinitionService = /** @class */ (function () {
    function GoToDefinitionService() {
    }
    GoToDefinitionService.prototype.fillCapabilities = function (capabilities) {
        capabilities.definitionProvider = true;
        capabilities.typeDefinitionProvider = true;
    };
    GoToDefinitionService.prototype.activate = function (connection, documents) {
        connection.onDefinition(function (params) {
            return getDefinitionRange(params.textDocument.uri, params.position);
        });
        connection.onTypeDefinition(function (params) {
            return getDefinitionRange(params.textDocument.uri, params.position);
        });
        function getDefinitionRange(uri, position) {
            var compilation = cache_1.accessCache(documents, uri);
            var target = compilation.getTargetAt(position);
            if (!target) {
                return undefined;
            }
            var action = compilation.actions.get(target.name);
            if (!action) {
                return undefined;
            }
            return vscode_languageserver_1.Location.create(uri, action.range);
        }
    };
    return GoToDefinitionService;
}());
exports.GoToDefinitionService = GoToDefinitionService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlcy9nby10by1kZWZpbml0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrREFBMkc7QUFFM0csdUNBQTRDO0FBRTVDO0lBQUE7SUErQkEsQ0FBQztJQTlCUSxnREFBZ0IsR0FBdkIsVUFBd0IsWUFBZ0M7UUFDdEQsWUFBWSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUN2QyxZQUFZLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO0lBQzdDLENBQUM7SUFFTSx3Q0FBUSxHQUFmLFVBQWdCLFVBQXVCLEVBQUUsU0FBd0I7UUFDL0QsVUFBVSxDQUFDLFlBQVksQ0FBQyxVQUFBLE1BQU07WUFDNUIsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsVUFBQSxNQUFNO1lBQ2hDLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxrQkFBa0IsQ0FBQyxHQUFXLEVBQUUsUUFBa0I7WUFDekQsSUFBTSxXQUFXLEdBQUcsbUJBQVcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFaEQsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBRUQsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFFRCxPQUFPLGdDQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQztJQUNILENBQUM7SUFDSCw0QkFBQztBQUFELENBL0JBLEFBK0JDLElBQUE7QUEvQlksc0RBQXFCIiwiZmlsZSI6InNyYy9zZXJ2aWNlcy9nby10by1kZWZpbml0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgMjAxOSBPbWFyIFRhd2Zpay4gUGxlYXNlIHNlZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHJvb3Qgb2YgdGhpcyByZXBvc2l0b3J5LlxuICovXG5cbmltcG9ydCB7IElDb25uZWN0aW9uLCBUZXh0RG9jdW1lbnRzLCBTZXJ2ZXJDYXBhYmlsaXRpZXMsIFBvc2l0aW9uLCBMb2NhdGlvbiB9IGZyb20gXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXJcIjtcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2ZXJcIjtcbmltcG9ydCB7IGFjY2Vzc0NhY2hlIH0gZnJvbSBcIi4uL3V0aWwvY2FjaGVcIjtcblxuZXhwb3J0IGNsYXNzIEdvVG9EZWZpbml0aW9uU2VydmljZSBpbXBsZW1lbnRzIExhbmd1YWdlU2VydmljZSB7XG4gIHB1YmxpYyBmaWxsQ2FwYWJpbGl0aWVzKGNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogdm9pZCB7XG4gICAgY2FwYWJpbGl0aWVzLmRlZmluaXRpb25Qcm92aWRlciA9IHRydWU7XG4gICAgY2FwYWJpbGl0aWVzLnR5cGVEZWZpbml0aW9uUHJvdmlkZXIgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIGFjdGl2YXRlKGNvbm5lY3Rpb246IElDb25uZWN0aW9uLCBkb2N1bWVudHM6IFRleHREb2N1bWVudHMpOiB2b2lkIHtcbiAgICBjb25uZWN0aW9uLm9uRGVmaW5pdGlvbihwYXJhbXMgPT4ge1xuICAgICAgcmV0dXJuIGdldERlZmluaXRpb25SYW5nZShwYXJhbXMudGV4dERvY3VtZW50LnVyaSwgcGFyYW1zLnBvc2l0aW9uKTtcbiAgICB9KTtcblxuICAgIGNvbm5lY3Rpb24ub25UeXBlRGVmaW5pdGlvbihwYXJhbXMgPT4ge1xuICAgICAgcmV0dXJuIGdldERlZmluaXRpb25SYW5nZShwYXJhbXMudGV4dERvY3VtZW50LnVyaSwgcGFyYW1zLnBvc2l0aW9uKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdldERlZmluaXRpb25SYW5nZSh1cmk6IHN0cmluZywgcG9zaXRpb246IFBvc2l0aW9uKTogTG9jYXRpb24gfCB1bmRlZmluZWQge1xuICAgICAgY29uc3QgY29tcGlsYXRpb24gPSBhY2Nlc3NDYWNoZShkb2N1bWVudHMsIHVyaSk7XG5cbiAgICAgIGNvbnN0IHRhcmdldCA9IGNvbXBpbGF0aW9uLmdldFRhcmdldEF0KHBvc2l0aW9uKTtcbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGlvbiA9IGNvbXBpbGF0aW9uLmFjdGlvbnMuZ2V0KHRhcmdldC5uYW1lKTtcbiAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBMb2NhdGlvbi5jcmVhdGUodXJpLCBhY3Rpb24ucmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuIl19
