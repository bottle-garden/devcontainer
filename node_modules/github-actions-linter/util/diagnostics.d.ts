/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
import { TokenKind, Token } from "../scanning/tokens";
import { Range, Diagnostic, DiagnosticSeverity } from "vscode-languageserver-types";
export declare enum DiagnosticCode {
    UnrecognizedCharacter = 0,
    UnterminatedStringLiteral = 1,
    UnsupportedEscapeSequence = 2,
    MissingToken = 3,
    UnexpectedToken = 4,
    PARSING_ERRORS_MARK = 5,
    MultipleVersion = 6,
    UnrecognizedVersion = 7,
    VersionAfterBlock = 8,
    ValueIsNotString = 9,
    ValueIsNotStringOrArray = 10,
    ValueIsNotAnObject = 11,
    PropertyAlreadyDefined = 12,
    PropertyMustBeDefined = 13,
    InvalidProperty = 14,
    DuplicateKey = 15,
    TooManyActions = 16,
    DuplicateBlock = 17,
    CircularDependency = 18,
    ActionDoesNotExist = 19,
    TooManySecrets = 20,
    DuplicateSecrets = 21,
    DuplicateActions = 22,
    ReservedEnvironmentVariable = 23,
    UnrecognizedEvent = 24,
    InvalidUses = 25
}
export declare function severityToString(severity: DiagnosticSeverity | undefined): string;
export declare class DiagnosticBag {
    private readonly items;
    constructor();
    readonly diagnostics: ReadonlyArray<Diagnostic>;
    unrecognizedCharacter(character: string, range: Range): void;
    unterminatedStringLiteral(range: Range): void;
    unsupportedEscapeSequence(character: string, range: Range): void;
    missingToken(kinds: TokenKind[], range: Range, endOfFile: boolean): void;
    unexpectedToken(token: Token): void;
    multipleVersions(range: Range): void;
    unrecognizedVersion(version: string, range: Range): void;
    versionAfterBlock(range: Range): void;
    valueIsNotString(range: Range): void;
    valueIsNotStringOrArray(range: Range): void;
    valueIsNotAnObject(range: Range): void;
    propertyAlreadyDefined(keyword: Token): void;
    propertyMustBeDefined(property: TokenKind, block: Token): void;
    invalidProperty(property: Token, block: TokenKind): void;
    duplicateKey(key: string, range: Range): void;
    tooManyActions(range: Range): void;
    duplicateBlock(duplicate: string, range: Range): void;
    circularDependency(action: string, range: Range): void;
    actionDoesNotExist(action: string, range: Range): void;
    tooManySecrets(range: Range): void;
    duplicateSecrets(duplicate: string, range: Range): void;
    duplicateActions(duplicate: string, range: Range): void;
    reservedEnvironmentVariable(range: Range): void;
    unrecognizedEvent(event: string, range: Range): void;
    invalidUses(range: Range): void;
}
