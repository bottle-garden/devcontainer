"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("../scanning/tokens");
var constants_1 = require("./constants");
var vscode_languageserver_types_1 = require("vscode-languageserver-types");
var DiagnosticCode;
(function (DiagnosticCode) {
    // Scanning
    DiagnosticCode[DiagnosticCode["UnrecognizedCharacter"] = 0] = "UnrecognizedCharacter";
    DiagnosticCode[DiagnosticCode["UnterminatedStringLiteral"] = 1] = "UnterminatedStringLiteral";
    DiagnosticCode[DiagnosticCode["UnsupportedEscapeSequence"] = 2] = "UnsupportedEscapeSequence";
    // Parsing
    DiagnosticCode[DiagnosticCode["MissingToken"] = 3] = "MissingToken";
    DiagnosticCode[DiagnosticCode["UnexpectedToken"] = 4] = "UnexpectedToken";
    // Divider
    DiagnosticCode[DiagnosticCode["PARSING_ERRORS_MARK"] = 5] = "PARSING_ERRORS_MARK";
    // Binding
    DiagnosticCode[DiagnosticCode["MultipleVersion"] = 6] = "MultipleVersion";
    DiagnosticCode[DiagnosticCode["UnrecognizedVersion"] = 7] = "UnrecognizedVersion";
    DiagnosticCode[DiagnosticCode["VersionAfterBlock"] = 8] = "VersionAfterBlock";
    DiagnosticCode[DiagnosticCode["ValueIsNotString"] = 9] = "ValueIsNotString";
    DiagnosticCode[DiagnosticCode["ValueIsNotStringOrArray"] = 10] = "ValueIsNotStringOrArray";
    DiagnosticCode[DiagnosticCode["ValueIsNotAnObject"] = 11] = "ValueIsNotAnObject";
    DiagnosticCode[DiagnosticCode["PropertyAlreadyDefined"] = 12] = "PropertyAlreadyDefined";
    DiagnosticCode[DiagnosticCode["PropertyMustBeDefined"] = 13] = "PropertyMustBeDefined";
    DiagnosticCode[DiagnosticCode["InvalidProperty"] = 14] = "InvalidProperty";
    DiagnosticCode[DiagnosticCode["DuplicateKey"] = 15] = "DuplicateKey";
    // Block Analysis
    DiagnosticCode[DiagnosticCode["TooManyActions"] = 16] = "TooManyActions";
    DiagnosticCode[DiagnosticCode["DuplicateBlock"] = 17] = "DuplicateBlock";
    DiagnosticCode[DiagnosticCode["CircularDependency"] = 18] = "CircularDependency";
    // Property Analysis
    DiagnosticCode[DiagnosticCode["ActionDoesNotExist"] = 19] = "ActionDoesNotExist";
    DiagnosticCode[DiagnosticCode["TooManySecrets"] = 20] = "TooManySecrets";
    DiagnosticCode[DiagnosticCode["DuplicateSecrets"] = 21] = "DuplicateSecrets";
    DiagnosticCode[DiagnosticCode["DuplicateActions"] = 22] = "DuplicateActions";
    DiagnosticCode[DiagnosticCode["ReservedEnvironmentVariable"] = 23] = "ReservedEnvironmentVariable";
    DiagnosticCode[DiagnosticCode["UnrecognizedEvent"] = 24] = "UnrecognizedEvent";
    DiagnosticCode[DiagnosticCode["InvalidUses"] = 25] = "InvalidUses";
})(DiagnosticCode = exports.DiagnosticCode || (exports.DiagnosticCode = {}));
function severityToString(severity) {
    switch (severity) {
        case undefined:
        case vscode_languageserver_types_1.DiagnosticSeverity.Error:
            return "ERROR";
        case vscode_languageserver_types_1.DiagnosticSeverity.Warning:
            return "WARN";
        default:
            throw new Error("Unexpected severity: '" + severity + "'.");
    }
}
exports.severityToString = severityToString;
var DiagnosticBag = /** @class */ (function () {
    function DiagnosticBag() {
        this.items = [];
    }
    Object.defineProperty(DiagnosticBag.prototype, "diagnostics", {
        get: function () {
            return this.items;
        },
        enumerable: true,
        configurable: true
    });
    DiagnosticBag.prototype.unrecognizedCharacter = function (character, range) {
        this.items.push({
            range: range,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            code: DiagnosticCode.UnrecognizedCharacter,
            message: "The character '" + character + "' is unrecognizable.",
        });
    };
    DiagnosticBag.prototype.unterminatedStringLiteral = function (range) {
        this.items.push({
            range: range,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            code: DiagnosticCode.UnterminatedStringLiteral,
            message: "This string literal must end with double quotes.",
        });
    };
    DiagnosticBag.prototype.unsupportedEscapeSequence = function (character, range) {
        this.items.push({
            range: range,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            code: DiagnosticCode.UnsupportedEscapeSequence,
            message: "The character '" + character + "' is not a supported escape sequence.",
        });
    };
    DiagnosticBag.prototype.missingToken = function (kinds, range, endOfFile) {
        this.items.push({
            range: range,
            code: DiagnosticCode.MissingToken,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A token of kind " + kinds.map(function (k) { return "'" + tokens_1.getTokenDescription(k) + "'"; }).join(" or ") + " was expected " + (endOfFile ? "after this" : "here") + ".",
        });
    };
    DiagnosticBag.prototype.unexpectedToken = function (token) {
        this.items.push({
            range: token.range,
            code: DiagnosticCode.UnexpectedToken,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A token of kind '" + tokens_1.getTokenDescription(token.kind) + "' was not expected here.",
        });
    };
    DiagnosticBag.prototype.multipleVersions = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.MultipleVersion,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A version is already specified for this document'. You can only specify one.",
        });
    };
    DiagnosticBag.prototype.unrecognizedVersion = function (version, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.UnrecognizedVersion,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "The version '" + version + "' is not valid. Only versions up to '" + constants_1.MAXIMUM_SUPPORTED_VERSION + "' are supported.",
        });
    };
    DiagnosticBag.prototype.versionAfterBlock = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.VersionAfterBlock,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Version must be specified before all actions or workflows are defined.",
        });
    };
    DiagnosticBag.prototype.valueIsNotString = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.ValueIsNotString,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Value must be a single string.",
        });
    };
    DiagnosticBag.prototype.valueIsNotStringOrArray = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.ValueIsNotStringOrArray,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Value must be a single string or an array of strings.",
        });
    };
    DiagnosticBag.prototype.valueIsNotAnObject = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.ValueIsNotAnObject,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Value must be an object.",
        });
    };
    DiagnosticBag.prototype.propertyAlreadyDefined = function (keyword) {
        this.items.push({
            range: keyword.range,
            code: DiagnosticCode.PropertyAlreadyDefined,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A property '" + tokens_1.getTokenDescription(keyword.kind) + "' is already defined in this block.",
        });
    };
    DiagnosticBag.prototype.propertyMustBeDefined = function (property, block) {
        this.items.push({
            range: block.range,
            code: DiagnosticCode.PropertyMustBeDefined,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "This '" + tokens_1.getTokenDescription(block.kind) + "' must define a '" + tokens_1.getTokenDescription(property) + "' property.",
        });
    };
    DiagnosticBag.prototype.invalidProperty = function (property, block) {
        this.items.push({
            range: property.range,
            code: DiagnosticCode.InvalidProperty,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A property of kind '" + tokens_1.getTokenDescription(property.kind) + "' cannot be defined for a '" + tokens_1.getTokenDescription(block) + "' block.",
        });
    };
    DiagnosticBag.prototype.duplicateKey = function (key, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.DuplicateKey,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "A key with the name '" + key + "' is already defined.",
        });
    };
    DiagnosticBag.prototype.tooManyActions = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.TooManyActions,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Too many actions defined. The maximum currently supported is '" + constants_1.MAXIMUM_SUPPORTED_ACTIONS + "'.",
        });
    };
    DiagnosticBag.prototype.duplicateBlock = function (duplicate, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.DuplicateBlock,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "This file already defines another workflow or action with the name '" + duplicate + "'.",
        });
    };
    DiagnosticBag.prototype.circularDependency = function (action, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.CircularDependency,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "The action '" + action + "' has a circular dependency on itself.",
        });
    };
    DiagnosticBag.prototype.actionDoesNotExist = function (action, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.ActionDoesNotExist,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "The action '" + action + "' does not exist in the same workflow file.",
        });
    };
    DiagnosticBag.prototype.tooManySecrets = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.TooManySecrets,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Too many secrets defined. The maximum currently supported is '" + constants_1.MAXIMUM_SUPPORTED_SECRETS + "'.",
        });
    };
    DiagnosticBag.prototype.duplicateSecrets = function (duplicate, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.DuplicateSecrets,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "This property has duplicate '" + duplicate + "' secrets.",
        });
    };
    DiagnosticBag.prototype.duplicateActions = function (duplicate, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.DuplicateActions,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "This property has duplicate '" + duplicate + "' actions.",
        });
    };
    DiagnosticBag.prototype.reservedEnvironmentVariable = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.ReservedEnvironmentVariable,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "Environment variables starting with 'GITHUB_' are reserved.",
        });
    };
    DiagnosticBag.prototype.unrecognizedEvent = function (event, range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.UnrecognizedEvent,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "The event '" + event + "' is not a known event type or a schedule.",
        });
    };
    DiagnosticBag.prototype.invalidUses = function (range) {
        this.items.push({
            range: range,
            code: DiagnosticCode.InvalidUses,
            source: constants_1.LANGUAGE_NAME,
            severity: vscode_languageserver_types_1.DiagnosticSeverity.Error,
            message: "The 'uses' property must be a path, a Docker image, or an owner/repo@ref remote.",
        });
    };
    return DiagnosticBag;
}());
exports.DiagnosticBag = DiagnosticBag;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
