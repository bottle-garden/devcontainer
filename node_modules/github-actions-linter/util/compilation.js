"use strict";
/*!
 * Copyright 2019 Omar Tawfik. Please see LICENSE file at the root of this repository.
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var diagnostics_1 = require("./diagnostics");
var scanner_1 = require("../scanning/scanner");
var parser_1 = require("../parsing/parser");
var binder_1 = require("../binding/binder");
var circular_dependencies_1 = require("../analysis/circular-dependencies");
var secrets_1 = require("../analysis/secrets");
var blocks_1 = require("../analysis/blocks");
var actions_1 = require("../analysis/actions");
var ranges_1 = require("./ranges");
var Compilation = /** @class */ (function () {
    function Compilation(text) {
        this.text = text;
        this.bag = new diagnostics_1.DiagnosticBag();
        this.tokens = scanner_1.scanText(text, this.bag);
        this.syntax = parser_1.parseTokens(this.tokens, this.bag);
        this.document = binder_1.bindDocument(this.syntax, this.bag);
        actions_1.analyzeActions(this.document, this.bag);
        blocks_1.analyzeBlocks(this.document, this.bag);
        circular_dependencies_1.analyzeCircularDependencies(this.document, this.bag);
        secrets_1.analyzeSecrets(this.document, this.bag);
    }
    Object.defineProperty(Compilation.prototype, "diagnostics", {
        get: function () {
            return this.bag.diagnostics;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Compilation.prototype, "actions", {
        get: function () {
            var e_1, _a;
            if (!this.lazyActions) {
                this.lazyActions = new Map();
                var _loop_1 = function (node) {
                    var references = Array();
                    this_1.document.actions.forEach(function (action) {
                        if (action.needs) {
                            action.needs.actions.forEach(function (reference) {
                                if (reference.value === node.name) {
                                    references.push(reference.syntax.range);
                                }
                            });
                        }
                    });
                    this_1.document.workflows.forEach(function (workflow) {
                        if (workflow.resolves) {
                            workflow.resolves.actions.forEach(function (reference) {
                                if (reference.value === node.name) {
                                    references.push(reference.syntax.range);
                                }
                            });
                        }
                    });
                    this_1.lazyActions.set(node.name, {
                        references: references,
                        name: node.name,
                        range: node.syntax.name.range,
                    });
                };
                var this_1 = this;
                try {
                    for (var _b = __values(this.document.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        _loop_1(node);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return this.lazyActions;
        },
        enumerable: true,
        configurable: true
    });
    Compilation.prototype.getTargetAt = function (position) {
        var e_2, _a, e_3, _b;
        try {
            for (var _c = __values(this.actions.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var action = _d.value;
                if (ranges_1.rangeContains(action.range, position)) {
                    return {
                        name: action.name,
                        range: action.range,
                    };
                }
                try {
                    for (var _e = __values(action.references), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var reference = _f.value;
                        if (ranges_1.rangeContains(reference, position)) {
                            return {
                                name: action.name,
                                range: reference,
                            };
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return undefined;
    };
    return Compilation;
}());
exports.Compilation = Compilation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
